#pragma once
#include "astnode.h"
/*
EBNF = { STATEMENT };
STATEMENT = '[a-zA-Z]+' '=' EXPRESSION;
EXPRESSION = { EXPL0 };
EXPL0 = EXPL1 [ '||' EXPRESSION ];
EXPL1 = EXPL2 [ '{' EXPRESSION '}' ];
EXPL2 = EXPL3 [ '[' EXPRESSION ']' ];
EXPL1 = '(' EXPRESSION ')' | '[' EXPRESSION ']' | '{' EXPRESSION '}' | tokenident | stateident;
*/


void skip(const char * input, unsigned int * offset);
//EBNF = { STATEMENT };
bool EBNF_start(const char * input, unsigned int * offset);
void EBNF(const char * input, unsigned int * offset, PASTNODE parent);
//STATEMENT = '[a-zA-Z]+' = EXPRESSION;
bool STATEMENT_start(const char * input, unsigned int * offset);
void STATEMENT(const char * input, unsigned int * offset, PASTNODE parent);
//EXPRESSION = { EXPL0 };
bool EXPRESSION_start(const char * input, unsigned int * offset);
void EXPRESSION(const char * input, unsigned int * offset, PASTNODE parent);
//EXPL0 = EXPL1 [ '|' EXPRESSION ];
bool EXPL0_start(const char * input, unsigned int * offset);
void EXPL0(const char * input, unsigned int * offset, PASTNODE parent);
//EXPL1 = EXPL2 [ '{' EXPRESSION '}' ];
bool EXPL1_start(const char * input, unsigned int * offset);
void EXPL1(const char * input, unsigned int * offset, PASTNODE parent);