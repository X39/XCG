token integer
    require plus { 0-9 }
    
token scalar
    require once { integer }
    require once .
    require once { integer }

production expC
    alternatives
        match "(" @[value]expA ")"
        match @[value]scalar
        match @[value]integer

left-recursive expB
	match @[left]expB "/" @[right]expC
		set capture op '/'
	match @[left]expB "*" @[right]expC
		set capture op '*'
	match @[left]expC
/*
	void expB__part(left)
	{
		if (can_match("/"))
		{
			match("/");
			match(expC);
		}
		else if (can_match("*"))
		{
			match("*");
			match(expC);
		}
	}
	void expB()
	{
		matched = match(expC);
		while(can_match(expB__part))
		{
			matched = expB__part(matched);
		}
	}
*/

left-recursive expA
	match @[left]expA "+" @[right]expB
		set capture op '+'
	match @[left]expA "-" @[right]expB
		set capture op '-'
	match @[left]expB

production main
    match @expA